# ChatGenius: Core Product Requirements Document (PRD) and Development Prompts

This document contains:

1. **ChatGenius PRD (Core MVP)** – a non-AI baseline for workplace communication (akin to Slack-like functionality).  
2. **Step-by-step Development Prompts** – short, targeted instructions for building out the MVP using Next.js 13, Tailwind CSS, and shadcn/ui.  

> **Note on Authentication**:  
> We will implement authentication using Clerk, providing secure email/password and social login options. For demonstration purposes, we'll include a "Skip Sign In" option that creates a temporary guest session. This allows quick access while maintaining Clerk's robust authentication features for registered users. Clerk will handle user management, session tracking, and authentication state.


---

## 1. Product Requirements Document (PRD) for ChatGenius

### 1.1 Project Overview
**ChatGenius** is a modern workplace messaging platform focused on real-time collaboration. In its first release, we aim to support the **core messaging features**—channels, direct messaging, file sharing, threads, and reactions. Future versions will introduce advanced AI features (such as generative replies or summarization).  

### 1.2 Goals & Objectives
1. **Enhance Team Communication**  
   Provide an intuitive interface for real-time text-based chat.
2. **Organize Discussions**  
   Use channels, direct messages, and threads to structure different topics.
3. **File Sharing & Reactions**  
   Allow quick file attachments and emoji-based feedback on messages.
4. **Extensibility**  
   Build a foundation for advanced features (AI enhancements, admin workflows, etc.).
5. **Scalability**  
   Choose tooling that is easy to scale out as user load increases.

### 1.3 User Stories
For this MVP, we define three primary user roles: **Regular User**, **Team Admin**, and **System Admin**. (Authentication for these roles is planned for a future phase.)

**Authentication & User Management**
1. "I want to sign up using my email or social accounts."
2. "I want to reset my password if I forget it."
3. "I want to remain logged in across sessions."
4. "I want to manage my profile and authentication settings."

**Regular User**  
1. “I want to see a list of channels so I can join relevant conversations.”  
2. “I want to post messages and have them appear in real time for others.”  
3. “I want to upload files and share them with my teammates.”  
4. “I want to search older messages and files.”  
5. “I want to use threads and emoji reactions to organize and respond quickly.”

**Team Admin**  
6. “I want to create or archive channels for my team’s needs.”  
7. “I want to invite or remove users from private channels.”

**System Admin**  
8. “I want to manage all channels, users, or even entire workspaces.”  
9. “I want to suspend or delete user accounts if needed.”

### 1.4 Core Functionality Overview
1. **Authentication & User Management**:
   - Email/password and social login (via Clerk)
   - Session management and persistence
   - Profile settings and password reset
   - Guest access option for demos
2. **Channel Organization**: Public or private channels, plus direct messages.  
2. **Real-Time Messaging**: Messages broadcast instantly to all participants in a channel.  
3. **File Sharing**: Users can attach files (images, PDFs, etc.) to their messages.  
4. **Threading**: Sub-replies under any message.  
5. **Reactions**: Inline emoji reactions for quick feedback.  
6. **Search**: Simple text-based search across messages, files, or channels.

### 1.5 Proposed Architecture
1. **Authentication Layer**
   - Clerk for user authentication and management
   - Protected API routes and middleware
   - Session handling and persistence
   - Role-based access control

2. **Frontend**  
   - Next.js 13 with Tailwind CSS and shadcn/ui for layout and styling.  
   - WebSocket (Socket.IO or similar) for real-time events.

2. **Backend**  
   - Next.js API routes or a custom server for real-time messaging.  
   - Database: PostgreSQL with a data access layer (e.g., Prisma, Knex, or raw SQL).

3. **Data Models** (Prisma Example)
   - **User**: `id`, `name`, `createdAt`, `updatedAt`  
   - **Channel**: `id`, `name`, `isPrivate`, `createdAt`, `updatedAt`  
   - **ChannelMembership**: `id`, `channelId`, `userId`, `createdAt`  
   - **Message**: `id`, `channelId`, `senderId`, `content`, `parentMessageId`, `createdAt`, `updatedAt`  
   - **Reaction**: `id`, `messageId`, `userId`, `emoji`, `createdAt`  
   - **File**: `id`, `messageId`, `filename`, `fileUrl`, `contentType`, `createdAt`  

### 1.6 MVP Deliverables
1. **Authentication**: 
   - User registration and login flows
   - Social authentication options
   - Protected routes and API endpoints
   - Guest access functionality
2. **Channels**: Create, list, update, and delete (or archive) channels.  
2. **Messaging**: Basic UI for sending and viewing messages in real time.  
3. **Threads**: Nested messages (parent/child).  
4. **Reactions**: Emoji-based quick feedback.  
5. **File Sharing**: File attachment with metadata stored in the database.  
6. **Search**: Basic endpoint or UI to query messages/files.  
